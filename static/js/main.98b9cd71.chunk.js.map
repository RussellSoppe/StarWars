{"version":3,"sources":["Header.js","Background.js","Card.js","Cardlist.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","src","alt","Background","Card","_ref","name","bday","id","height","eyecolor","dist_modules","map","item","key","title","expanded","Cardlist","array","user","i","src_Card","birth_year","eye_color","PagesBttn","props","onClick","page","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","people","people2","people3","_this2","Promise","all","url","fetch","then","response","json","setState","results","catch","error","console","log","_this3","changeMe","src_Background","src_Header","src_Cardlist","App_PagesBttn","pageChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98b9cd71.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className='header'>\r\n    <img \r\n      src=\"https://vignette.wikia.nocookie.net/disney/images/2/21/Star_Wars_logo.png/revision/latest?cb=20170909202326\" \r\n      alt=\"Star_Wars_logo\" \r\n    >\r\n    </img>\r\n    <div>\r\n    Character Bios\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './App.css';\r\n\r\nconst Background = () => {\r\n  return (\r\n    <div className='background'></div>\r\n  );\r\n}\r\n\r\nexport default Background;","import React from 'react';\r\nimport { Accordion, AccordionItem } from 'react-sanfona';\r\n\r\nconst Card = ({ name, id, bday, height, eyecolor }) => {\r\n  // const { name, email, id } = props; can add as const or put in function as seen\r\n  return (\r\n    <div className='card'>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <div>\r\n          <Accordion className='accordion'>\r\n            {[1].map(item => {\r\n              return (\r\n              \r\n                <AccordionItem key={item} className=\"bio\" title={`Bio`} expanded={item === 0}>\r\n                  <div className='accordionitem'>\r\n                    <p>Birthday: {bday}</p>\r\n                    <p>Height: {height}</p>\r\n                    <p>Eye Color: {eyecolor}</p>\r\n                  </div>\r\n                </AccordionItem>\r\n             \t );\r\n            })}\r\n          </Accordion>\r\n        </div>\r\n      </div>\r\n    </div> \r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({ array }) => {\r\n  return (\r\n    <div>\r\n      {array.map((user, i) => {\r\n          return (\r\n            <Card \r\n            key={i} \r\n            id={i}\r\n            name={user.name} \r\n            bday={user.birth_year}\r\n            height={user.height}\r\n            eyecolor={user.eye_color}\r\n            />\r\n          );\r\n        }\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cardlist;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Background from './Background';\nimport Cardlist from './Cardlist';\n\n\nconst PagesBttn = (props) => {\n   return (\n    <div className='pages'>\n      <h3>Pages</h3>\n      <div className='pagebuttons'>\n        <button onClick={() => props.page(0)}>1</button>\n        <button onClick={() => props.page(1)}>2</button>\n        <button onClick={() => props.page(2)}>3</button>\n        <button onClick={() => props.page(3)}>4</button>\n        <button onClick={() => props.page(4)}>5</button>\n        <button onClick={() => props.page(5)}>6</button>\n        <button onClick={() => props.page(6)}>7</button>\n        <button onClick={() => props.page(7)}>8</button>\n        <button onClick={() => props.page(8)}>9</button>\n      </div>\n    </div>\n  );\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      people: [],\n      people2: [],\n      people3:[]\n    };\n  }\n  \ncomponentDidMount(){\n    const urls = [\n    'https://swapi.co/api/people/',\n    'https://swapi.co/api/people/?page=2',\n    'https://swapi.co/api/people/?page=3',\n    'https://swapi.co/api/people/?page=4',\n    'https://swapi.co/api/people/?page=5',\n    'https://swapi.co/api/people/?page=6',\n    'https://swapi.co/api/people/?page=7',\n    'https://swapi.co/api/people/?page=8',\n    'https://swapi.co/api/people/?page=9'\n    ];\n    Promise.all(urls.map(url => \n      fetch(url) \n        .then(response => response.json())\n        ))\n        .then(array => {\n          this.setState ({\n            people: array[0].results,\n            people2: array,\n          })\n\n        })\n        .catch(error => console.log('failed', error))\n  }\n  \n \n\n pageChange (i) {\n  this.setState ({people: this.state.people2[i].results});\n  }\n\n  render() {\n    let changeMe = this.state.people;\n\n    return (\n      <div className=\"App\">\n        <Background/>\n       <div>\n        <Header/>\n          <div>\n            <Cardlist array = {changeMe}/>\n          </div>\n          <PagesBttn page={(i) => this.pageChange(i)}/>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}